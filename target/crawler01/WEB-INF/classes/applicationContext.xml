<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!-- ********************************************配置Spring*************************************** -->
    <!-- 注解扫描包 -->
    <context:component-scan base-package="com.tytm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
    </context:component-scan>

    <!-- ********************************************配置hibernate************************************* -->
    <!-- spring 读取外部配置文件 -->
    <!-- 第一种读取方式 -->
    <!--<context:property-placeholder location="classpath:/application.properties"/>-->

    <!-- 第二种读取方式 -->
    <!-- 与上面的配置等价，下面的更容易理解 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations"> <!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
            <array>
                <value>classpath:application.properties</value>
            </array>
        </property>
    </bean>

    <!-- 配置c3p0连接池(配置数据源) -->
    <bean id="c3p0Source" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${db.driverClass}"/> <!--数据库连接驱动-->
        <property name="jdbcUrl" value="${db.url}"/><!--数据库地址-->
        <property name="user" value="${db.user}"/><!--用户名-->
        <property name="password" value="${db.password}"/> <!--密码-->
        <property name="initialPoolSize" value="${pool.initialPoolSize}"/><!--最大空闲时间-->
        <property name="minPoolSize" value="${pool.minPoolSize}"/><!--最小连接数-->
        <property name="maxPoolSize" value="${pool.maxPoolSize}"/><!--最大连接数-->
        <property name="maxIdleTime" value="${pool.maxIdleTime}"/><!--最大空闲时间-->
    </bean>

    <!-- 配置sessionFactory-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="c3p0Source"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop><!--指定数据库方言-->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop><!--在控制台显示执行的数据库操作语句-->
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop><!--在控制台显示执行的数据哭操作语句（格式）-->
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop><!--hibernate根据实体自动生成数据库表-->
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.tytm.entity</value>
            </list>
        </property>
    </bean>

    <!-- 事务管理器 -->
    <bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!--<property name="globalRollbackOnParticipationFailure" value="false"></property>-->
    </bean>

    <!-- 定义事务切面，并应用事务通知 -->
    <!-- Spring AOP config 解释一下 (* com.evan.crm.service.*.*(..)) 中几个通配符的含义： -->
    <!-- 第一个 * —— 通配 任意返回值类型 -->
    <!-- 第二个 * —— 通配 包com.evan.crm.service下的任意class -->
    <!-- 第三个 * —— 通配包com.evan.crm.service下的任意class的任意方法 -->
    <!-- 第四个 .. —— 通配 方法可以有0个或多个参数 -->
    <!-- 事务控制位置，一般在业务层service -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <aop:config expose-proxy="true">
        <aop:pointcut id="serviceOperation" expression="execution(* com.tytm.service.*.*(..))"/>
        <!-- 多个 expression="(expression="execution(* com.tytm.service.*.*(..))orexpression="execution(* com.tytm.service.*.*(..)))" -->
        <aop:advisor pointcut-ref="serviceOperation" advice-ref="serviceTxAdvice"/>
    </aop:config>

    <!-- 第二种方式: 拦截器方式配置事务 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <tx:advice id="serviceTxAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!--以下方法都是可能设计修改的方法，就无法设置为只读-->
            <tx:method name="insert*" rollback-for="Exception"/>
            <tx:method name="save*" rollback-for="Exception"/>
            <tx:method name="update*" rollback-for="Exception"/>
            <tx:method name="delete*" rollback-for="Exception"/>
            <!--让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务-->
            <tx:method name="*" read-only="true" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- hibernate模板(1)推荐使用 -->
    <!--<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>-->

    <!-- jdbc模板(2) -->
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="c3p0Source"/>
    </bean>-->

    <!-- 类继承HibernateDaoSupport(3) -->

    <!-- 第一种方式: 注解方式配置事物 -->
    <!-- <tx:annotation-driven transaction-manager="txManager" /> -->

</beans>